@page "/settings"
@inject LocalStorageService LocalStorage
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
<PageTitle>Settings - EMR-FHIR Mapping Tool</PageTitle>

<div class="container-fluid">
    <h1 class="mb-4">Settings</h1>

    <div class="row">
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">EMR Database Connection</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="dbType" class="form-label">Database Type</label>
                        <select id="dbType" class="form-select" @bind="DbType">
                            <option value="mssql">Microsoft SQL Server</option>
                            <option value="mysql">MySQL</option>
                            <option value="postgresql">PostgreSQL</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="serverName" class="form-label">Server/Host</label>
                        <input type="text" class="form-control" id="serverName" @bind="ServerName" placeholder="localhost">
                    </div>

                    <div class="row mb-3">
                        <div class="col">
                            <label for="port" class="form-label">Port</label>
                            <input type="text" class="form-control" id="port" @bind="Port" placeholder="1433">
                        </div>
                        <div class="col">
                            <label for="database" class="form-label">Database Name</label>
                            <input type="text" class="form-control" id="database" @bind="Database" placeholder="EmrDatabase">
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="username" class="form-label">Username</label>
                        <input type="text" class="form-control" id="username" @bind="Username" placeholder="sa">
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="password" @bind="Password" placeholder="Password">
                    </div>

                    <div class="d-flex justify-content-between">
                        <button class="btn btn-primary" @onclick="SaveDatabaseSettings">Save Connection</button>
                        <button class="btn btn-outline-secondary" @onclick="TestConnection">Test Connection</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header bg-success text-white">
                    <h5 class="card-title mb-0">UI Settings</h5>
                </div>
                <div class="card-body">
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="showDataTypes" @bind="UISettings.ShowDataTypes">
                        <label class="form-check-label" for="showDataTypes">Show data types</label>
                    </div>

                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="showMappingLines" @bind="UISettings.ShowMappingLines">
                        <label class="form-check-label" for="showMappingLines">Show mapping connection lines</label>
                    </div>

                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="enableDragDrop" @bind="UISettings.EnableDragAndDrop">
                        <label class="form-check-label" for="enableDragDrop">Enable drag and drop</label>
                    </div>

                    <div class="mb-3">
                        <label for="theme" class="form-label">Theme</label>
                        <select id="theme" class="form-select" @bind="UISettings.Theme">
                            <option value="light">Light</option>
                            <option value="dark">Dark</option>
                        </select>
                    </div>

                    <button class="btn btn-success" @onclick="SaveUISettings">Save UI Settings</button>
                </div>
            </div>

            <div class="card">
                <div class="card-header bg-info text-white">
                    <h5 class="card-title mb-0">Application</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="apiUrl" class="form-label">API URL</label>
                        <input type="text" class="form-control" id="apiUrl" @bind="ApiUrl" placeholder="https://localhost:7001">
                    </div>

                    <div class="d-flex justify-content-between">
                        <button class="btn btn-info" @onclick="SaveApiSettings">Save API Settings</button>
                        <button class="btn btn-outline-danger" @onclick="ClearAllSettings">Reset All Settings</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Database connection settings
    private string DbType { get; set; } = "mssql";
    private string ServerName { get; set; } = "localhost";
    private string Port { get; set; } = "1433";
    private string Database { get; set; } = "EmrDatabase";
    private string Username { get; set; } = "sa";
    private string Password { get; set; } = "";

    // API settings
    private string ApiUrl { get; set; } = "";

    // UI settings
    private UISettings UISettings { get; set; } = new UISettings();

    protected override async Task OnInitializedAsync()
    {
        await LoadSettings();
    }

    private async Task LoadSettings()
    {
        try
        {
            // Load database settings
            var dbSettings = await LocalStorage.GetItemAsync<Dictionary<string, string>>("emr_db_settings");
            if (dbSettings != null)
            {
                DbType = dbSettings.GetValueOrDefault("type", "mssql");
                ServerName = dbSettings.GetValueOrDefault("server", "localhost");
                Port = dbSettings.GetValueOrDefault("port", "1433");
                Database = dbSettings.GetValueOrDefault("database", "EmrDatabase");
                Username = dbSettings.GetValueOrDefault("username", "sa");
                Password = dbSettings.GetValueOrDefault("password", "");
            }

            // Load API settings - first from local storage, fallback to configuration
            ApiUrl = await LocalStorage.GetItemAsync<string>("api_url");
            if (string.IsNullOrEmpty(ApiUrl))
            {
                ApiUrl = Configuration["ApiBaseUrl"] ?? "";
            }

            // Load UI settings
            var uiSettings = await LocalStorage.GetItemAsync<UISettings>("ui_settings");
            if (uiSettings != null)
            {
                UISettings = uiSettings;
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading settings: {ex.Message}");
        }
    }

    private async Task SaveDatabaseSettings()
    {
        try
        {
            var dbSettings = new Dictionary<string, string>
                {
                    ["type"] = DbType,
                    ["server"] = ServerName,
                    ["port"] = Port,
                    ["database"] = Database,
                    ["username"] = Username,
                    ["password"] = Password
                };

            await LocalStorage.SetItemAsync("emr_db_settings", dbSettings);
            await ShowToast("Database settings saved successfully.");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving database settings: {ex.Message}");
            await ShowToast("Error saving database settings.", "error");
        }
    }

    private async Task SaveApiSettings()
    {
        try
        {
            await LocalStorage.SetItemAsync("api_url", ApiUrl);
            await ShowToast("API settings saved successfully.");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving API settings: {ex.Message}");
            await ShowToast("Error saving API settings.", "error");
        }
    }

    private async Task SaveUISettings()
    {
        try
        {
            await LocalStorage.SetItemAsync("ui_settings", UISettings);
            await ShowToast("UI settings saved successfully.");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving UI settings: {ex.Message}");
            await ShowToast("Error saving UI settings.", "error");
        }
    }

    private async Task TestConnection()
    {
        try
        {
            // In a real app, you would call your API to test the connection
            await ShowToast("Connection test not implemented in this demo.", "warning");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Connection test error: {ex.Message}");
            await ShowToast("Error testing connection.", "error");
        }
    }

    private async Task ClearAllSettings()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to reset all settings to default values? This cannot be undone."))
        {
            try
            {
                await LocalStorage.RemoveItemAsync("emr_db_settings");
                await LocalStorage.RemoveItemAsync("api_url");
                await LocalStorage.RemoveItemAsync("ui_settings");

                // Reload the settings
                await LoadSettings();

                await ShowToast("All settings have been reset to default values.");
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clearing settings: {ex.Message}");
                await ShowToast("Error clearing settings.", "error");
            }
        }
    }

    private async Task ShowToast(string message, string type = "success")
    {
        // In a real app, you would use a toast library or component
        await JSRuntime.InvokeVoidAsync("alert", message);
    }
}